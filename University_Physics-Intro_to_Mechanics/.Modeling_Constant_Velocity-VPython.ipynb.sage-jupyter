{"kernelspec":{"display_name":"Python 2 (SageMath)","language":"python","name":"python2"},"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.10"}}
{"cell_type":"markdown","metadata":{},"source":"In addition to spheres you can create an array of other shapes in VPython.  Some of the shapes include:\n\n- `box()`\n- `cyinder()`\n- `cone()`\n- `ring()`\n\nA complete list of shapes and properties can be found in the [VPython documentation](http://vpython.org/contents/docs/index.html)\n\nEach shape has different properties that need to be specified.  For the box, you can specify the length, width, height, as well as a vector representing the axis of the box.  The axis defines the direction of the length measurement.  The command to create a box is:\n\n`box_name=box(pos=vector(0,0,0),axis=vector(1,0,0),length=1,width=1,height=1,color=color.red)`\n\nThere are default values for each property so if you don't specify the `axis` vector or the `length`, VPython will use a default value.\n\nYou can also attach arrows to objects.  We'll see a later example where it is used to represent velocity, but here it shows the direction of the `axis` vector for the box. The `attach_arrow()` command needs to know which object it should be attached to and which property of the object to use for the direction of the arrow.\n"}
{"cell_type":"code","execution_count":1,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"data":{"application/javascript":"require.undef(\"nbextensions/jquery-ui.custom.min\");","text/plain":"<IPython.core.display.Javascript object>"},"metadata":{},"output_type":"display_data"},{"data":{"application/javascript":"require.undef(\"nbextensions/glow.2.1.min\");","text/plain":"<IPython.core.display.Javascript object>"},"metadata":{},"output_type":"display_data"},{"data":{"application/javascript":"require.undef(\"nbextensions/glowcomm\");","text/plain":"<IPython.core.display.Javascript object>"},"metadata":{},"output_type":"display_data"},{"data":{"application/javascript":"require.undef(\"nbextensions/pako.min\");","text/plain":"<IPython.core.display.Javascript object>"},"metadata":{},"output_type":"display_data"},{"data":{"application/javascript":"require.undef(\"nbextensions/pako_deflate.min\");","text/plain":"<IPython.core.display.Javascript object>"},"metadata":{},"output_type":"display_data"},{"data":{"application/javascript":"require.undef(\"nbextensions/pako_inflate.min\");","text/plain":"<IPython.core.display.Javascript object>"},"metadata":{},"output_type":"display_data"},{"data":{"application/javascript":"require([\"nbextensions/glowcomm\"], function(){console.log(\"glowcomm loaded\");})","text/plain":"<IPython.core.display.Javascript object>"},"metadata":{},"output_type":"display_data"},{"data":{"text/html":"<div id=\"glowscript\" class=\"glowscript\"></div>","text/plain":"<IPython.core.display.HTML object>"},"metadata":{},"output_type":"display_data"},{"data":{"application/javascript":"window.__context = { glowscript_container: $(\"#glowscript\").removeAttr(\"id\")}","text/plain":"<IPython.core.display.Javascript object>"},"metadata":{},"output_type":"display_data"},{"data":{"text/html":"<div id=\"glowscript\" class=\"glowscript\"></div>","text/plain":"<IPython.core.display.HTML object>"},"metadata":{},"output_type":"display_data"},{"data":{"application/javascript":"window.__context = { glowscript_container: $(\"#glowscript\").removeAttr(\"id\")}","text/plain":"<IPython.core.display.Javascript object>"},"metadata":{},"output_type":"display_data"}],"source":"from vpython import *\n\nscene = canvas()\n\nbox1=box(pos=vector(2,0,0),axis=vector(1,1,1),length=.75,width=.5,height=.5,color=color.red)\nattach_arrow(box1,\"axis\",color=color.blue,scale=2)  #Arrow uses box1.axis for it's direction and the magnitude is 2x as big as box1.axis"}
{"cell_type":"markdown","metadata":{},"source":"### Try It Yourself\n\nTry adding a cone and a cylinder to the scene above, along with arrows pointing along the axis of each object.  Rather then specifying length, width and height, you need to give a radius for the cone and cylinder.  The length of the `axis` vector will determine the height of the cone and cylinder.  You can add your code in the cell above and re-evaluate the cell."}
{"cell_type":"markdown","metadata":{},"source":"In the [Intro to VPython in SageMathCloud](Intro_to_VPython_in_SageMathCloud.ipynb) activity, you learned how to make an object move using a `while` loop to run through a set of code many times.  Each time the program runs through the loop it updates the position of the objects based on the velocity of the object and the time step size.\n\nThe code below is set up to animate a ball moving towards the left at a constant speed.  Use the `attach_arrow()` command to add a velocity vector.  Rather than specifying `\"axis\"` as the vector, specify `\"vel\"` as the property to use for the arrow.  Make the arrow yellow so it stands out (`color.yellow') and scale the arrow by a factor of 2.  Note that  `ball1.vel` must be defined *before* you can attach an arrow to the velocity so place your code where it says `\"###Add your code here###\"` \n\n"}
{"cell_type":"code","execution_count":2,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"data":{"text/html":"<div id=\"glowscript\" class=\"glowscript\"></div>","text/plain":"<IPython.core.display.HTML object>"},"metadata":{},"output_type":"display_data"},{"data":{"application/javascript":"window.__context = { glowscript_container: $(\"#glowscript\").removeAttr(\"id\")}","text/plain":"<IPython.core.display.Javascript object>"},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":"ERROR! Session/line number was not unique in database. History logging moved to new session 16\n"}],"source":"from vpython import *\n\nscene1=canvas()  #Create canvas to draw on\n\nground=box(pos=vector(0,-1,0),axis=vector(1,0,0),length=20,height=0.1,color=color.green)  #Grass-colored box for reference\n\nball1=sphere(color=color.blue)  #Create sphere\nball1.vel=vector(1,0,0)  #Give ball a velocity\n###Add your code here###\n\n\ndt=0.01  #Time step size\nt=0    #Set initial time to zero\ntf=3   #Time when motion will stop\n\n\nwhile t<tf:\n    rate(30)   #Frames per second\n    ball1.pos=ball1.pos+ball1.vel*dt   #Update position\n    t=t+dt   #Update time"}
{"cell_type":"markdown","metadata":{},"source":"### Try It Yourself\n\nAdd a box to the scene above, give it an initial velocity, and attach an arrow to the box.  Use the cell above for this.\n\nNote: When a cell is running you should see an asterisk next to the word 'In' near the left of the cell.  When the code has finished a number will appear next to 'In'."}
{"cell_type":"markdown","metadata":{},"source":"### Try It Yourself\n\nIn addition to adding arrows to moving objects you can also add a trail that shows where the object has been.  The command for this is `attach_trail()`.  You can change the color of the trail and you can have the trail be a solid line or a series of dots.  Here are some examples of the code to do this:\n\n\n- `tail = attach_trail(ball1,color=color.yellow)   #Solid yellow line`\n\n- `tail=attach_trail(ball1,type=\"points\")    #Trail is series of dots rather than solid line`\n\n- `tail=attach_trail(ball1,retain=50)    #Trail only keeps last 50 points of data`\n\n- `tail=attach_trail(ball1,type=points\",pps=1)   #Trail is series of dots with one point added per second (pps)`\n\nTry attaching a trail to the ball and box in the scene above."}
{"cell_type":"markdown","metadata":{},"source":"Being able to interpret a graph and relate it to the motion of an object is a key skill for students in physics.  Fortunately VPython has graphing capabilities baked right in.  There are only three things you need to do to graph data: 1) Create the graph, 2) specify the type of graph, and 3) plot the data points.\n\nThe graph is created using `graph()` and you can specify the size of the window, the axes titles, and the minimum and maximum extent of the graph.  If you specify maximum x-values and y-values that are too small the graph will expand to fit all data\n\n"}
{"cell_type":"code","execution_count":3,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"data":{"text/html":"<div id=\"glowscript\" class=\"glowscript\"></div>","text/plain":"<IPython.core.display.HTML object>"},"metadata":{},"output_type":"display_data"},{"data":{"application/javascript":"window.__context = { glowscript_container: $(\"#glowscript\").removeAttr(\"id\")}","text/plain":"<IPython.core.display.Javascript object>"},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":"ERROR! Session/line number was not unique in database. History logging moved to new session 17\n"}],"source":"from vpython import *\n\nscene2=canvas()  #Create canvas to draw on\ngraph_screen=graph(width=400,height=400,xtitle='time', ytitle='Position',xmin=0,xmax=10,ymin=0,ymax=14)\npos2_graph = gdots(color=color.orange, size=2)   #Create graph to plot position vs. time\n###Create new graph here###\n\n\nground=box(pos=vector(0,-1,0),axis=vector(1,0,0),length=20,height=0.1,color=color.green)  #Grass-colored box for reference\n\nball2=sphere(color=color.blue)   #Create the ball\nball2.vel=vector(1,.1,0)  #Give ball a velocity\nattach_arrow(ball2,\"vel\",scale=2,color=color.yellow)  #Attach an arrow to show velocity\nattach_trail(ball2,color=color.yellow,type=\"points\",retain=10,pps=1)\n\ndt=0.01  #Time step size\nt=0    #Initial time\ntf=3   #Final time (stop going through while loop)\n\n\nwhile t<tf:\n    rate(30)\n    ball2.pos=ball2.pos+ball2.vel*dt   #update position\n    position=ball2.pos.x   #For plotting\n    pos2_graph.plot(pos=(t,position))   #Plot a single data point on the graph\n    t=t+dt   #Advance time step\n"}
{"cell_type":"markdown","metadata":{"collapsed":true},"source":"You can create multiple graphs.  To create a second graph, call the `graph()` command a second time _after_ you have defined the curves for the first graph.  After you have called the `graph()` command a second time you can then define the curves that will appear on that graph.  You can repeat this process for each graph that you would like to add.\n\n### For You To Try\n\nAdd a second graph to display the x-component of the velocity of the ball.  Rather than using the `gdots(color=color.orange, size=2)` command, use `gcurve(color=color.blue, width=4)`\n\nWhen you are done you can move on to [Constant Acceleration](Constant_Acceleration-VPython.ipynb)."}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":""}